#version 330 core
out vec3 FragColor;
in vec2 UV;
in vec3 Normal;
in vec3 FragmentPosition_WorldSpace;
in vec4 FragPosLightSpace;


uniform sampler2D texture_diffuse1;
uniform sampler2DShadow shadow_map1;

uniform vec3 lightPos;




in vec4 ShadowCoord;

uniform vec3 ambint;



vec4 toonshade(vec3 color, vec3 amInt, vec3 diffInt)
{
	vec3 viewDir = normalize(-FragmentPosition_WorldSpace);
	vec3 lightDir = vec3(0,1,0);
	vec3 halfVector = normalize(lightDir + viewDir);


	vec3 lightToEye = lightPos - -FragmentPosition_WorldSpace;
	vec3 n = normalize(Normal);
	vec3 s = normalize(normalize(lightToEye));

	vec3 ambient =  amInt * vec3(0.3);
	float sDotN = max(dot(s, n), 0.0);
	vec3 diffuse = color * vec3(0.3) * floor(sDotN * 2) * (1.0 /2);

	vec3 specular = vec3(1) * pow(max(0.0, dot(normalize(FragmentPosition_WorldSpace), halfVector)), 0.2) * 1.0;
	
	vec3 text = texture(texture_diffuse1, UV).rgb;

	vec3 diffSpec = vec3(diffuse + specular);


	vec3 lighting = ambient + diffuse + specular;  

	return vec4(lighting, 1.0);
}




void main()
{    
	//FragColor = texture(texture_diffuse1, UV).rgb;
    //FragColor += vec4(toon,1.0);

	float shadow = textureProj(shadow_map1, ShadowCoord);
	FragColor = mix(texture(texture_diffuse1, UV).rgb * shadow, toonshade(vec3(1,1,1), vec3(0.5), vec3(0.5)).rgb, 0.5f);
	//FragColor = toonshade(vec3(1,1,1), vec3(1), vec3(1));
	//FragColor = texture(shadowMap, ShadowCoord);

	// Light emission properties
	//vec3 LightColor = vec3(1,1,1);
	
	// Material properties
	//vec3 MaterialDiffuseColor = texture( texture_diffuse1, UV ).rgb;

	//float visibility = texture(shadow_map1, vec3(ShadowCoord.xy, (ShadowCoord.z)/ShadowCoord.w) );

	//FragColor = visibility * MaterialDiffuseColor;
}