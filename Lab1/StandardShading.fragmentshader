#version 330 core
out vec3 FragColor;

in vec2 UV;
smooth in vec3 Normal;
in vec3 FragmentPosition_WorldSpace;


uniform sampler2D texture_diffuse1;
uniform vec3 lightPos;

vec3 BlinnPhongShading(vec3 color)
{
	vec3 viewDir = normalize(-FragmentPosition_WorldSpace);
	vec3 lightDir = vec3(0,1,0);

	vec3 halfVector = normalize(lightDir + viewDir);

	float alpha = 0.20;
	vec3 ambient = color * 0.45;
	vec3 diffuse = color * max(0.0, dot(lightDir, normalize(FragmentPosition_WorldSpace))) * 0.6;
	vec3 specular = vec3(1) * pow(max(0.0, dot(normalize(FragmentPosition_WorldSpace), halfVector)), alpha) * 1.0;

	return ambient + diffuse + specular;
}

vec3 toonshade(vec3 color)
{
	vec3 lightToEye = lightPos - -FragmentPosition_WorldSpace;

	vec3 n = normalize(Normal);
	vec3 s = normalize(normalize(lightToEye));

	vec3 ambient =  vec3(0.45) * vec3(0.6);
	float sDotN = max(dot(s, n), 0.0);
	vec3 diffuse = color * vec3(0.45) * ceil(sDotN * 3) * 1.0;
	return ambient + vec3(0.45) * diffuse;
}




void main()
{    

	


	//FragColor = texture(texture_diffuse1, UV).rgb;
    //FragColor += vec4(toon,1.0);

	//FragColor = toonshade();

	FragColor = mix(texture(texture_diffuse1, UV).rgb, toonshade(vec3(0,0,1)), 0.5f).rgb;
}