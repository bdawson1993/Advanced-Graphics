#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normalPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Normal;


// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 WVP;
uniform mat4 V;
uniform mat4 M;
uniform mat4 P;

uniform float time;
out vec3 FragmentPosition_WorldSpace;


out vec4 ShadowCoord;
uniform mat4 shadowMatrix;

vec4 DisplacmentVector()
{
	vec3 pos = vertexPosition_modelspace;
	
	float x = pos.x;
	float y = pos.y;
	float z = pos.z;

	return normalize( vec4(x,y,z,1));

}


void main()
{
	mat4 shadowMatrixM = shadowMatrix * M;

	ShadowCoord = shadowMatrixM * vec4(vertexPosition_modelspace, 1.0);


	float waveWidth = 3;
	float waveHeight = 0.04;
	Normal = normalPosition_modelspace;
    UV = vertexUV;
    
	vec4 v = vec4( vertexPosition_modelspace, 1.0 );

	
	v.z += (
	    // Add some offset to the waves to make it slightly less regular
	    sin(waveWidth * vertexPosition_modelspace.x + time * 1.3) *
	    cos(waveWidth * vertexPosition_modelspace.y + time * 0.9) * waveHeight
    ) + (
        // Extra waves to add interest
	    cos(waveWidth * 2.0 * vertexPosition_modelspace.x + time * -.3) *
	    sin(waveWidth * 4.0 * vertexPosition_modelspace.y + time * 3.9) * ( waveHeight / 2.0 )
    );
   // vHeight = v.z;
    
    gl_Position = MVP * v;
    
	
}
