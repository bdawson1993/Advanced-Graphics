#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normalPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Normal;


// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat4 P;
uniform lowp sampler2D texture_height1;
uniform float time;

void main()
{
	UV = vertexUV;
	vec3 pos = vertexPosition_modelspace;
        vec2 offset1 = vec2(1.0, 0.5) * time * 0.1;
        vec2 offset2 = vec2(0.5, 1.0) * time * 0.1;
        float hight1 = texture2D(texture_height1, vertexUV + offset1).r * 0.02;
        float hight2 = texture2D(texture_height1, vertexUV + offset2).r * 0.02;
        pos.z += hight1 + hight2; 
		vec4 mvPosition = (M * V) * vec4( pos, 1.0 );
		gl_Position = P * mvPosition;
}
